void saveToFile(const char* fileName, uint8_t buffer[], size_t size)
{
    std::fstream file(fileName, std::ios::binary | std::ios::out);

    for(size_t i = 0; i < size; i++)
    {
        file.write(reinterpret_cast<char*>(&buffer[i]), 1);
    }
    file.close();
}

void readFromFile(const char* fileName, uint8_t buffer[], size_t size)
{
}

void Dumper::Print2(void* bufferVoid, size_t length)
{
    //    utilities::PrintSeparator();

    if (m_settings.IsCArray)
    {
        PrintArray(bufferVoid, length);
        return;
    }
    if (m_settings.only)
    {
        PrintOnlyVisible(bufferVoid, length);
        return;
    }
    if (m_settings.compress)
    {
        PrintCompressInvisible(bufferVoid, length);
        return;
    }
    if (m_settings.single)
    {
        PrintRemoveFirstInvisible(bufferVoid, length);
        return;
    }

    auto buffer = static_cast<uint8_t*>(bufferVoid);

    const size_t columnSize = 8 * m_settings.columnCount;
    const size_t mod = length % columnSize;
    const size_t rest = mod ? (columnSize - mod) : 0;

    bool isPreviousVisible = false;
    size_t currentWordLength = 0;
    for (size_t i = 0; i < length + rest; ++i)
    {
        bool isCurrentVisible = false;
        // Offset
        if (i % columnSize == 0)
        {
            PrintOffset(i);
        }
        else if (m_settings.isShowDump && i % 8 == 0)
            cout << " "; // new column

        // Dump
        if (m_settings.isShowDump)
        {
            if (i < length)
                cout << boost::format("%02x ") % static_cast<uint16_t>(buffer[i]); // hex data
            else
                cout << "   "; // end of block, aligning for ASCII hexdump
        }
        // ASCII
        if (i % columnSize == (columnSize - 1))
        {
            cout << " ";
            for (size_t j = i - (columnSize - 1); j <= i; ++j)
            {
                if (m_settings.isSpaceBetweenAsciiBytes && j % 8 == 0)
                    cout << " "; // new column

                if (j >= length)
                {
                    break; // end of block
                }
                else
                {
                    isCurrentVisible = isprint(buffer[j]);
                    if (isCurrentVisible)
                    {
                        if (currentWordLength == 0 && j != 0 && m_settings.newLine)
                        {
                            cout << endl;
                            size_t spacesLength = OffsetLength() + HexDumpLength();
                            if (m_settings.isShowDump && m_settings.offset != Offset::None)
                                --spacesLength;
                            std::string spaces(spacesLength, ' ');
                            cout << spaces;
                        }

                        cout << buffer[j];
                        ++currentWordLength;
                    }
                    else
                    {
                        if (j + 1 < length && isPreviousVisible && isprint(buffer[j + 1]) && m_settings.useWideChar)
                        {
                            cout << m_settings.widePlaceHolder;
                        }
                        else
                        {
                            currentWordLength = 0;
                            cout << m_settings.placeHolder;
                        }
                    }
                }
                isPreviousVisible = isCurrentVisible;
            }
            cout << endl;
        }
    }
    //    utilities::PrintSeparator();
    cout << "length=" << length << " (address=" << bufferVoid << ")\n";
}

void Dumper::PrintOnlyVisible(void* bufferVoid, size_t length)
{
    std::cout << "mode: print only visible:" << std::endl;
    auto buffer = static_cast<uint8_t*>(bufferVoid);

    bool isFirstVisible = true;
    for (size_t i = 0; i < length; ++i)
    {
        if (isprint(buffer[i]))
        {
            cout << buffer[i];
            if (isFirstVisible && m_settings.newLine)
            {
                isFirstVisible = false;
                cout << endl;
            }
        }
        else
        {
            isFirstVisible = true;
        }
    }
    std::cout << std::endl;
}

void Dumper::PrintCompressInvisible(void* bufferVoid, size_t length)
{
    std::cout << "mode: keep only one invisible:" << std::endl;

    auto buffer = static_cast<uint8_t*>(bufferVoid);

    cout << std::hex;

    for (size_t i = 0; i < length; ++i)
    {
        if (!isprint(buffer[i]))
        {
            if (m_settings.newLine)
                cout << endl;
            else
                cout << " ";
            while (++i && i < length && !isprint(buffer[i]));
            if (i >= length)
                return;
        }
        cout << buffer[i];
    }
    std::cout << std::endl;
}

void Dumper::PrintRemoveFirstInvisible(void* bufferVoid, size_t length)
{
    std::cout << "mode: remove first invisible:" << std::endl;

    auto buffer = static_cast<uint8_t*>(bufferVoid);

    cout << std::hex;

    std::string str;
    bool isAlreadyDeleted = false;
    bool isFirstVisible = true;
    bool isPrevVisible = false;
    for (size_t i = 0; i < length; ++i)
    {
        bool currentVisible = isprint(buffer[i]);
        if (isPrevVisible && !currentVisible)
        {
            if (str.length() >= m_settings.length)
            {
                cout << str;
                if (m_settings.length != 0)
                    cout << endl;
            }

            str = "";
        }
        if (!currentVisible)
        {
            if (!isAlreadyDeleted)
            {
                isAlreadyDeleted = true;
                ++i;
                if (i >= length)
                    return;
            }
            isFirstVisible = true;
            if (m_settings.length == 0)
                cout << m_settings.placeHolder;
        }

        if (currentVisible)
        {
            if (isFirstVisible && m_settings.newLine)
            {
                isFirstVisible = false;
                if (m_settings.length == 0)
                    cout << endl;
            }
            isAlreadyDeleted = false;
            str += buffer[i];
        }
        isPrevVisible = currentVisible;
    }
    std::cout << std::endl;
}


void Dumper::PrintArray(void* bufferVoid, size_t length)
{
    auto buffer = static_cast<uint8_t*>(bufferVoid);

    cout << std::hex;

    for (size_t i = 0; i < length; ++i)
    {
        if (i > 0)
        {
            cout << ",";
            if (m_settings.isSpaceBetweenAsciiBytes)
                cout << " ";
        }
        if (i % m_settings.columnCount == 0 && i > 0)
            cout << endl;
        cout << boost::format("0x%02x") % static_cast<uint16_t>(buffer[i]);
    }
    std::cout << std::endl;
}